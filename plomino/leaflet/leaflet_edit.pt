<tal:block tal:define="fieldname python:options['fieldname'];
					   field python:options['field'];
                       param python:field.getSettings().getParameters(edit_mode=True);">
<div id="leaflet-field">
<!--<div id="leaflet-tools" style="float:left; margin-left: 4em; position: relative; width: auto; z-index:10; background: none repeat scroll 0 0 rgba(0, 0, 0, 0.25)">
    <span tal:condition="python:options['field'].getSettings().find_location in ['BOTH', 'EDIT']"
    	tal:define="geonames_param python:options['field'].getSettings().geonames_parameters">
    	<input style="z-index: 150; position: relative;" type="text"
    			id="geonames_search" value="[Enter a location]"
    			onclick="this.value=''"
    			onkeypress="if(event.which == 13) {search_and_go(this.value); return false;}"/>
    	<script tal:content="structure string:var geonames_param='${geonames_param}'"></script>
    	<script>
jq(function() {
    jq( "#geonames_search" ).autocomplete({
    	select: function(event, ui) {
    		search_and_go(ui.item.value);
    	},
	    source: function(req, add){            
            jq.getJSON("http://ws.geonames.org/searchJSON?maxRows=15&name_startsWith="+jq("#geonames_search").val()+"&"+geonames_param, req,
                function(data) {  
                    var suggestions = [];  

                    //read names in results  
                    data = data.geonames;
                    jq.each(data, function(i, val){  
                        suggestions.push(val.name); 
                    });

                    //give values to add callback  
                    add(suggestions);
                }
            );
        }
    });
});

function search_and_go(query) {
	jq.getJSON("http://ws.geonames.org/searchJSON?q="+ query +"&maxRows=1&"+geonames_param, null,
		function(data) {
			data = data.geonames;
			if(data.length > 0) {
				var center = new L.LatLng(data[0].lat, data[0].lng);
				map.setView(center, 14);
			} else {
				alert("No matching place.");
			}
    	}
	);
}
    	</script>
    </span>
    <select onchange="map._state=this.value">
    	<option value="0">Select an action</option>
    	<option value="1">Add a point</option>
    	<option value="2">Add a line</option>
    	<option value="3">Add a polygon</option>
    	<option value="4">Delete</option>
    </select><img src="fullscreenexpand_icon.png" onclick="toggle_fullscreen()"/>
<script>
var original_scroll;
function toggle_fullscreen() {
	var field = jq('#leaflet-field');
	var map_div = jq('#leafletmapdiv');
	if(field.attr('style')==undefined || field.attr('style')=='') {
		field.attr('style', "background-color: white; position: fixed; height: 100%; width: 100%; top: 0; left: 0; z-index: 100");
		map_div.css('height', '100%');
		original_scroll = jq(document).scrollTop();
		jq(document).scrollTop(0);
	} else {
		field.attr('style', '');
		map_div.css('height', '400px');
		jq(document).scrollTop(original_scroll);
	}
	map.invalidateSize();
}
</script>
</div>-->
	<select id="leaflet-editor-control" style="display: none;" onchange="map._state=this.value">
    	<option value="0">Select an action</option>
    	<option value="1">Add a point</option>
    	<option value="2">Add a line</option>
    	<option value="3">Add a polygon</option>
    	<option value="4">Delete</option>
    </select>
    <input id="leaflet-locator-control" style="display: none;" type="text"
    			value="[Enter a location]"
    			onclick="this.value=''"
    			onkeypress="if(event.which == 13) {search_and_go(this.value); return false;}"/>
	<div id="leafletmapdiv" style="width: 100%%; height: 400px"></div>
	<script>
L.Control.Fullscreen = L.Control.extend({
	options: {
		position: 'topright'
	},

	onAdd: function (map) {
		var className = 'leaflet-control-zoom',
		container = L.DomUtil.create('div', className);
		var link = L.DomUtil.create('a', className, container);
		link.href = '#';
		link.title = "Fullscreen";
		link.style.backgroundImage = "url(fullscreenexpand_icon.png)";
		L.DomEvent
			.addListener(link, 'click', L.DomEvent.stopPropagation)
			.addListener(link, 'click', L.DomEvent.preventDefault)
			.addListener(link, 'click', function() {
					if(L.DomUtil.hasClass(map._container, "leaflet-fullscreen")) {
						L.DomUtil.removeClass(map._container, "leaflet-fullscreen");
						jq(document).scrollTop(map._originalscroll);
					} else {
						L.DomUtil.addClass(map._container, "leaflet-fullscreen");
						map._originalscroll = jq(document).scrollTop();
						jq(document).scrollTop(0);
					}
					map.invalidateSize();
				}, map);

		return container;
	}
});

L.Control.Editor = L.Control.extend({
	options: {
		position: 'topright'
	},

	onAdd: function (map) {
		var className = 'leaflet-control-zoom',
		container = L.DomUtil.create('div', className);
		el = jq('#leaflet-editor-control').clone();
		jq(container).append(el);
		el.attr('style', '');
		jq(el).autocomplete({
	    	select: function(event, ui) {
	    		search_and_go(ui.item.value);
	    	},
		    source: function(req, add){            
	            jq.getJSON("http://ws.geonames.org/searchJSON?maxRows=15&name_startsWith="+jq("#geonames_search").val()+"&"+geonames_param, req,
	                function(data) {  
	                    var suggestions = [];  
	
	                    //read names in results  
	                    data = data.geonames;
	                    jq.each(data, function(i, val){  
	                        suggestions.push(val.name); 
	                    });
	
	                    //give values to add callback  
	                    add(suggestions);
	                }
	            );
	        }
	    });
		L.DomEvent
			.addListener(container, 'click', L.DomEvent.stopPropagation)
			.addListener(container, 'click', L.DomEvent.preventDefault);
		return container;
	}
});

L.Control.FindLocation = L.Control.extend({
	options: {
		position: 'topright'
	},

	onAdd: function (map) {
		var className = 'leaflet-control-zoom',
		container = L.DomUtil.create('div', className);
		el = jq('#leaflet-locator-control').clone();
		jq(container).append(el);
		el.attr('style', 'z-index:150');
		L.DomEvent
			.addListener(container, 'click', L.DomEvent.stopPropagation)
			.addListener(container, 'click', L.DomEvent.preventDefault);
		return container;
	}
});

L.Map.mergeOptions({
	allowFullscreen: true,
	editor: true,
	findlocation: false
});

L.Map.addInitHook(function () {
	if (this.options.allowFullscreen) {
		this.fullscreenControl = new L.Control.Fullscreen();
		this.addControl(this.fullscreenControl);
	}
	if (this.options.editor) {
		this.editor = new L.Control.Editor();
		this.addControl(this.editor);
	}
	if (this.options.findlocation) {
		this.findlocation = new L.Control.FindLocation();
		this.addControl(this.findlocation);
	}
});
PlominoEditableGeoJSON = L.GeoJSON.extend({
	initialize: function (geojson, options) {
		L.Util.setOptions(this, options);

		this._geojson = geojson;
		this._layers = {};

		this.on("featureparse", function(e) {
		    if(e.layer.editing) {
		        e.layer.editing.enable();
		    }
		    if(e.geometryType == "Point") {
		        e.layer.options.draggable = true;
		    }
		});

		if (geojson) {
			this.addGeoJSON(geojson);
		}
	},
	layerToJSON: function(layer) {
		coord2str = function (obj) {  
		    if(obj.lng) return '[' + obj.lng + ', '+obj.lat+']';
		    var n, json = [];  
	        for (n in obj) {
	            json.push(coord2str(obj[n]));
	        }
	        return ("[" + String(json) + "]");    
		};
		var json = '';
		if(layer.getLatLng) json = '{"type": "Feature", "geometry": {"type": "Point", "coordinates": '+coord2str(layer.getLatLng())+'}}';
		if(layer.getLatLngs) {
	    	if(layer instanceof L.Polygon) {
	    		json = '{"type": "Feature", "geometry": {"type": "Polygon", "coordinates": ['+coord2str(layer.getLatLngs())+']}}';
	    	} else {
		    	if(layer instanceof L.MultiPolygon) json = '{"type": "Feature", "geometry": {"type": "MultiPolygon", "coordinates": '+coord2str(layer.getLatLngs())+'}}';
		    	if(layer instanceof L.Polyline) json = '{"type": "Feature", "geometry": {"type": "LineString", "coordinates": '+coord2str(layer.getLatLngs())+'}}';
		    	if(layer instanceof L.MultiPolyline) json = '{"type": "Feature", "geometry": {"type": "MultiLineString", "coordinates": '+coord2str(layer.getLatLngs())+'}}';
	    	}
	    }
		return json;
	},
	getGeoJSON: function () {
		var geojson = [];
		this._iterateLayers(function(layer) {geojson.push(this.layerToJSON(layer)); }, this);
		return '{"type": "FeatureCollection", "features": ['+String(geojson)+']}';
	},
	addLayer: function (layer) {
		L.GeoJSON.prototype.addLayer.call(this, layer);
		layer.on('click', this._layerClick.bind(this));
	},
	_layerClick: function (event) {
	    if(this._map._state == this._map.STATE_DELETE) {
	      this.removeLayer(event.layer);
	    }
	}
});
PlominoEditableMap = L.Map.extend({

  STATE_DEFAULT:  0,
  STATE_ADD_POINT: 1,
  STATE_ADD_LINE: 2,
  STATE_ADD_POLYGON: 3,
  STATE_DELETE: 4,

  initialize: function(/*HTMLElement or String*/ id, /*Object*/ options) {
      L.Map.prototype.initialize.call(this, id, options);
      this._mapdiv = $(this._container);
      this._state = this.STATE_DEFAULT;
      this._start = null;
      this._next = null;
      // Map events
      this.on('click', this._onClick.bind(this));
  },
  addPoint: function (latlng) {
      marker = new L.Marker(latlng, {draggable: true});
      geojsonLayer.addLayer(marker);
  },
  addLinePoint: function (latlng) {
    if(this._start == null) {
      this._start = new L.Marker(latlng, {draggable: true});
      this.addLayer(this._start);
    } else {
      line = new L.Polyline([this._start.getLatLng(), latlng]);
      line.editing.enable();
      geojsonLayer.addLayer(line);
      this.removeLayer(this._start);
      this._start = null;
    }
  },
  addPolygonPoint: function (latlng) {
    if(this._start == null) {
      this._start = new L.Marker(latlng, {draggable: true});
      this.addLayer(this._start);
    } else {
      if(this._next == null) {
        this._next = new L.Marker(latlng, {draggable: true});
        this.addLayer(this._next);
      } else {
        polygon = new L.Polygon([this._start.getLatLng(), this._next.getLatLng(), latlng]);
        polygon.editing.enable();
        geojsonLayer.addLayer(polygon);
        this.removeLayer(this._start);
        this.removeLayer(this._next);
        this._start = null;
        this._next = null;
      }
    }
  },
  _onClick: function (event) {
    if(this._state == this.STATE_ADD_POINT) {
      this.addPoint(event.latlng);
    }
    if(this._state == this.STATE_ADD_LINE) {
      this.addLinePoint(event.latlng);
    }
    if(this._state == this.STATE_ADD_POLYGON) {
      this.addPolygonPoint(event.latlng);
    }
  }
});
	</script>
	<script tal:content="structure string:var json_source='./tojson?item=${fieldname}'"></script>
	<script tal:content="structure param"></script>
	<input type="hidden" tal:attributes="name fieldname;" />
</div>
</tal:block>
